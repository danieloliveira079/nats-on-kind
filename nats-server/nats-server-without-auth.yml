---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nats-config
data:
  nats.conf: |
    pid_file: "/var/run/nats/nats.pid"

    http: 8222

    cluster {
      port: 6222

      # Use explicit static routes to avoid intermittent DNS issues
      # that could cause partitions via gossip while bootstrapping.
      routes [
        nats://nats-0.nats:6222
        nats://nats-1.nats:6222
        nats://nats-2.nats:6222
      ]

      cluster_advertise: $CLUSTER_ADVERTISE
      connect_retries: 60
    }

    #############################################
    # Advertise the public ip of the Kubelet    #
    # where this NATS Server node is running    #
    #############################################
    leafnodes {
      listen: "0.0.0.0:7422"
      include "advertise/gateway_advertise.conf"
    }
    include "advertise/client_advertise.conf"

    #############################################
    #                                           #
    # Accounts resolver config                  #
    #                                           #
    #############################################
    include "accounts/resolver.conf"

---
apiVersion: v1
kind: Service
metadata:
  name: nats
  labels:
    app: nats
spec:
  selector:
    app: nats
  clusterIP: None
  ports:
  - name: client
    port: 4222
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  labels:
    app: nats
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 1
  serviceName: "nats"
  template:
    metadata:
      labels:
        app: nats
    spec:
      # Common volumes for the containers
      volumes:
      - name: config-volume
        configMap:
          name: nats-config
      - name: accounts-volume
        configMap:
          name: nats-accounts
      - name: pid
        emptyDir: {}
      - name: advertiseconfig
        emptyDir: {}

      # Required to be able to HUP signal and apply config reload
      # to the server without restarting the pod.
      shareProcessNamespace: true

      # Required to be able to lookup external public ip
      # that is setup as the client advertise.
      serviceAccountName: nats-server

      # Initializer container required to be able to lookup
      # the external ip on which this node is running.
      # initContainers:
      # - name: bootconfig
      #   command:
      #   - nats-pod-bootconfig
      #   - -f
      #   - /etc/nats-config/advertise/client_advertise.conf
      #   - -gf
      #   - /etc/nats-config/advertise/gateway_advertise.conf
      #   env:
      #   - name: KUBERNETES_NODE_NAME
      #     valueFrom:
      #       fieldRef:
      #         apiVersion: v1
      #         fieldPath: spec.nodeName
      #   image: connecteverything/nats-boot-config:0.5.2
      #   imagePullPolicy: IfNotPresent
      #   volumeMounts:
      #   - mountPath: /etc/nats-config/advertise
      #     name: advertiseconfig
      #     subPath: advertise

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats
        image: nats:2.1.0-alpine3.10
        ports:
        - containerPort: 4222
          name: client
          hostPort: 4222
        - containerPort: 7422
          name: leafnodes
          hostPort: 7422
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics
        command:
         - "nats-server"
         - "--config"
         - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).nats.$(POD_NAMESPACE).svc
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: accounts-volume
            mountPath: /etc/nats-config/accounts
          - name: pid
            mountPath: /var/run/nats
          - mountPath: /etc/nats-config/advertise
            name: advertiseconfig
            subPath: advertise

        # Disable all cpu limits for the server.
        #
        resources:
          requests:
            cpu: 0

        # Liveness/Readiness probes against the monitoring
        #
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # Using the alpine based NATS image, we add an extra sleep that is
              # the same amount as the terminationGracePeriodSeconds to allow
              # the NATS Server to gracefully terminate the client connections.
              #
              command: ["/bin/sh", "-c", "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]

      #################################
      #                               #
      #  NATS Configuration Reloader  #
      #                               #
      #################################
      - name: reloader
        image: connecteverything/nats-server-config-reloader:0.6.0
        command:
         - "nats-server-config-reloader"
         - "-pid"
         - "/var/run/nats/nats.pid"
         - "-config"
         - "/etc/nats-config/nats.conf"
         - "-config"
         - "/etc/nats-config/accounts/resolver.conf"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: accounts-volume
            mountPath: /etc/nats-config/accounts
          - name: pid
            mountPath: /var/run/nats

      ##############################
      #                            #
      #  NATS Prometheus Exporter  #
      #                            #
      ##############################
      - name: metrics
        image: synadia/prometheus-nats-exporter:0.5.0
        args:
        - -connz
        - -routez
        - -subz
        - -varz
        - -prefix=nats
        - -use_internal_server_id
        - -DV
        - http://localhost:8222/
        ports:
        - containerPort: 7777
          name: metrics
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nats-server
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nats-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nats-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nats-server
subjects:
- kind: ServiceAccount
  name: nats-server
  namespace: default
